// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductSerivice_CreateProduct_FullMethodName = "/product.ProductSerivice/CreateProduct"
	ProductSerivice_DetailProduct_FullMethodName = "/product.ProductSerivice/DetailProduct"
	ProductSerivice_EditProduct_FullMethodName   = "/product.ProductSerivice/EditProduct"
)

// ProductSeriviceClient is the client API for ProductSerivice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductSeriviceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	DetailProduct(ctx context.Context, in *DetailProductRequest, opts ...grpc.CallOption) (*DetailProductResponse, error)
	EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*EditProductResponse, error)
}

type productSeriviceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductSeriviceClient(cc grpc.ClientConnInterface) ProductSeriviceClient {
	return &productSeriviceClient{cc}
}

func (c *productSeriviceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ProductSerivice_CreateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSeriviceClient) DetailProduct(ctx context.Context, in *DetailProductRequest, opts ...grpc.CallOption) (*DetailProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailProductResponse)
	err := c.cc.Invoke(ctx, ProductSerivice_DetailProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productSeriviceClient) EditProduct(ctx context.Context, in *EditProductRequest, opts ...grpc.CallOption) (*EditProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditProductResponse)
	err := c.cc.Invoke(ctx, ProductSerivice_EditProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductSeriviceServer is the server API for ProductSerivice service.
// All implementations must embed UnimplementedProductSeriviceServer
// for forward compatibility.
type ProductSeriviceServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	DetailProduct(context.Context, *DetailProductRequest) (*DetailProductResponse, error)
	EditProduct(context.Context, *EditProductRequest) (*EditProductResponse, error)
	mustEmbedUnimplementedProductSeriviceServer()
}

// UnimplementedProductSeriviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductSeriviceServer struct{}

func (UnimplementedProductSeriviceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductSeriviceServer) DetailProduct(context.Context, *DetailProductRequest) (*DetailProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailProduct not implemented")
}
func (UnimplementedProductSeriviceServer) EditProduct(context.Context, *EditProductRequest) (*EditProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProduct not implemented")
}
func (UnimplementedProductSeriviceServer) mustEmbedUnimplementedProductSeriviceServer() {}
func (UnimplementedProductSeriviceServer) testEmbeddedByValue()                         {}

// UnsafeProductSeriviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductSeriviceServer will
// result in compilation errors.
type UnsafeProductSeriviceServer interface {
	mustEmbedUnimplementedProductSeriviceServer()
}

func RegisterProductSeriviceServer(s grpc.ServiceRegistrar, srv ProductSeriviceServer) {
	// If the following call pancis, it indicates UnimplementedProductSeriviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductSerivice_ServiceDesc, srv)
}

func _ProductSerivice_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSeriviceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSerivice_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSeriviceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSerivice_DetailProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSeriviceServer).DetailProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSerivice_DetailProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSeriviceServer).DetailProduct(ctx, req.(*DetailProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductSerivice_EditProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductSeriviceServer).EditProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductSerivice_EditProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductSeriviceServer).EditProduct(ctx, req.(*EditProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductSerivice_ServiceDesc is the grpc.ServiceDesc for ProductSerivice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductSerivice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductSerivice",
	HandlerType: (*ProductSeriviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductSerivice_CreateProduct_Handler,
		},
		{
			MethodName: "DetailProduct",
			Handler:    _ProductSerivice_DetailProduct_Handler,
		},
		{
			MethodName: "EditProduct",
			Handler:    _ProductSerivice_EditProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/product.proto",
}
